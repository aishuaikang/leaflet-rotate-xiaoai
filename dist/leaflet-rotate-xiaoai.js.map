{"version":3,"file":"leaflet-rotate-xiaoai.js","sources":["../src/dom/Draggable.js","../src/geometry/Point.js","../src/layer/DivOverlay.js","../src/layer/Popup.js","../src/layer/Tooltip.js","../src/layer/tile/GridLayer.js","../src/map/Map.js","../src/map/handler/ContainerMutation.js","../src/control/Rotate.js"],"sourcesContent":["/**\n * @external L.Draggable\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/dom/Draggable.js\n */\n\n/**\n * A class for making DOM elements draggable (including touch support).\n * Used internally for map and marker dragging. Only works for elements\n * that were positioned with [`L.DomUtil.setPosition`](#domutil-setposition).\n */\n\nL.Draggable.include({\n\n    /** @TODO */\n    // updateMapBearing: function(mapBearing) {\n    //     this._mapBearing = mapBearing;\n    // },\n\n});","/**\n * @external L.Point\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/geometry/Point.js\n */\n\nL.extend(L.Point.prototype, {\n\n    /**\n     * Rotate around (0,0) by applying the 2D rotation matrix:\n     * \n     * ⎡ x' ⎤ = ⎡ cos θ  -sin θ ⎤ ⎡ x ⎤\n     * ⎣ y' ⎦   ⎣ sin θ   cos θ ⎦ ⎣ y ⎦\n     * \n     * @param theta must be given in radians.\n     */\n    rotate: function(theta) {\n        return this.rotateFrom(theta, new L.Point(0,0))\n    },\n\n    /**\n     * Rotate around (pivot.x, pivot.y) by:\n     * \n     * 1. subtract (pivot.x, pivot.y)\n     * 2. rotate around (0, 0)\n     * 3. add (pivot.x, pivot.y) back\n     * \n     * same as `this.subtract(pivot).rotate(theta).add(pivot)`\n     * \n     * @param {Number} theta \n     * @param {L.Point} pivot \n     * \n     * @returns {L.Point}\n     */\n    rotateFrom: function(theta, pivot) {\n        if (!theta) { return this; }\n        var sinTheta = Math.sin(theta);\n        var cosTheta = Math.cos(theta);\n        var cx = pivot.x,\n            cy = pivot.y;\n        var x = this.x - cx,\n            y = this.y - cy;\n\n        return new L.Point(\n            x * cosTheta - y * sinTheta + cx,\n            x * sinTheta + y * cosTheta + cy\n        );\n    },\n\n});\n","/**\n * @external L.DivOverlay\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/DivOverlay.js\n */\n\nconst divOverlayProto = L.extend({}, L.DivOverlay.prototype);\n\nL.DivOverlay.include({\n\n    /**\n     * Update L.Popup and L.Tooltip anchor positions after\n     * the map is moved by calling `map.setBearing(theta)`\n     * \n     * @listens L.Map~rotate\n     */\n    getEvents: function() {\n        return L.extend(divOverlayProto.getEvents.apply(this, arguments), { rotate: this._updatePosition });\n    },\n\n    /**\n     * 0. update element anchor point (divOverlayProto v1.9.3)\n     * 1. rotate around anchor point (subtract anchor -> rotate point -> add anchor)\n     */\n    _updatePosition: function() {\n        if (!this._map) { return; }\n        divOverlayProto._updatePosition.apply(this, arguments);\n        if (this._map && this._map._rotate && this._zoomAnimated) {\n            var anchor = this._getAnchor();\n            var pos = L.DomUtil.getPosition(this._container).subtract(anchor);\n            L.DomUtil.setPosition(this._container, this._map.rotatedPointToMapPanePoint(pos).add(anchor));\n        }\n\n    },\n\n});\n","/**\n * @external L.Popup\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/Popup.js\n */\n\nconst popupProto = L.extend({}, L.Popup.prototype);\n\nL.Popup.include({\n\n    /**\n     * 0. update element anchor point (popupProto v1.9.3)\n     * 1. rotate around anchor point (subtract anchor -> rotate point -> add anchor)\n     */\n    _animateZoom: function(e) {\n        popupProto._animateZoom.apply(this, arguments);\n        if (this._map && this._map._rotate) {\n            var anchor = this._getAnchor();\n            var pos = L.DomUtil.getPosition(this._container).subtract(anchor);\n            L.DomUtil.setPosition(this._container, this._map.rotatedPointToMapPanePoint(pos).add(anchor));\n        }\n    },\n\n    /**\n     * Fix for L.popup({ keepInView = true })\n     * \n     * @see https://github.com/fnicollet/Leaflet/pull/21\n     */\n    _adjustPan: function() {\n        if (!this.options.autoPan || (this._map._panAnim && this._map._panAnim._inProgress)) { return; }\n\n        // We can endlessly recurse if keepInView is set and the view resets.\n        // Let's guard against that by exiting early if we're responding to our own autopan.\n        if (this._autopanning) {\n            this._autopanning = false;\n            return;\n        }\n\n        var map = this._map,\n            marginBottom = parseInt(L.DomUtil.getStyle(this._container, 'marginBottom'), 10) || 0,\n            containerHeight = this._container.offsetHeight + marginBottom,\n            containerWidth = this._containerWidth,\n            layerPos = new L.Point(this._containerLeft, -containerHeight - this._containerBottom);\n\n        layerPos._add(L.DomUtil.getPosition(this._container));\n\n        /** @TODO use popupProto._adjustPan */\n        // var containerPos = map.layerPointToContainerPoint(layerPos);\n        var containerPos = layerPos._add(this._map._getMapPanePos()),\n            padding = L.point(this.options.autoPanPadding),\n            paddingTL = L.point(this.options.autoPanPaddingTopLeft || padding),\n            paddingBR = L.point(this.options.autoPanPaddingBottomRight || padding),\n            size = map.getSize(),\n            dx = 0,\n            dy = 0;\n\n        if (containerPos.x + containerWidth + paddingBR.x > size.x) { // right\n            dx = containerPos.x + containerWidth - size.x + paddingBR.x;\n        }\n        if (containerPos.x - dx - paddingTL.x < 0) { // left\n            dx = containerPos.x - paddingTL.x;\n        }\n        if (containerPos.y + containerHeight + paddingBR.y > size.y) { // bottom\n            dy = containerPos.y + containerHeight - size.y + paddingBR.y;\n        }\n        if (containerPos.y - dy - paddingTL.y < 0) { // top\n            dy = containerPos.y - paddingTL.y;\n        }\n\n        // @namespace Map\n        // @section Popup events\n        // @event autopanstart: Event\n        // Fired when the map starts autopanning when opening a popup.\n        if (dx || dy) {\n            // Track that we're autopanning, as this function will be re-ran on moveend\n            if (this.options.keepInView) {\n                this._autopanning = true;\n            }\n            map\n                .fire('autopanstart')\n                .panBy([dx, dy]);\n        }\n    },\n\n});\n","/**\n * @external L.Tooltip\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/Tooltip.js\n */\n\nconst tooltipProto = L.extend({}, L.Tooltip.prototype);\n\nL.Tooltip.include({\n\n    _animateZoom: function(e) {\n        if (!this._map._rotate) {\n            return tooltipProto._animateZoom.apply(this, arguments);\n        }\n        var pos = this._map._latLngToNewLayerPoint(this._latlng, e.zoom, e.center);\n\n        pos = this._map.rotatedPointToMapPanePoint(pos);\n        this._setPosition(pos);\n    },\n\n    _updatePosition: function() {\n        if (!this._map._rotate) {\n            return tooltipProto._updatePosition.apply(this, arguments);\n        }\n        var pos = this._map.latLngToLayerPoint(this._latlng);\n\n        pos = this._map.rotatedPointToMapPanePoint(pos);\n        this._setPosition(pos);\n    },\n\n});\n","/**\n * @external L.GridLayer\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/tile/GridLayer.js\n */\n\nconst gridLayerProto = L.extend({}, L.GridLayer.prototype);\n\nL.GridLayer.include({\n\n    /**\n     * Redraw L.TileLayer bounds after the map is\n     * moved by just calling `map.setBearing(theta)`\n     * \n     * @listens L.Map~rotate\n     */\n    getEvents: function() {\n        var events = gridLayerProto.getEvents.apply(this, arguments);\n        if (this._map._rotate && !this.options.updateWhenIdle) {\n            if (!this._onRotate) {\n                this._onRotate = L.Util.throttle(this._onMoveEnd, this.options.updateInterval, this);\n            }\n            events.rotate = this._onRotate;\n        }\n        return events;\n    },\n\n    _getTiledPixelBounds: function(center) {\n        if (!this._map._rotate) {\n            return gridLayerProto._getTiledPixelBounds.apply(this, arguments);\n        }\n\n        return this._map._getNewPixelBounds(center, this._tileZoom);\n    },\n\n});\n","/**\n * @external L.Map\n * \n * @see https://github.com/Leaflet/Leaflet/blob/v1.9.3/src/map/Map.js\n */\n\nconst mapProto = L.extend({}, L.Map.prototype);\n\nL.Map.mergeOptions({ rotate: false, bearing: 0, });\n\nL.Map.include({\n\n    /**\n     * @param {(HTMLElement|String)} id html selector\n     * @param {Object} [options={}] leaflet map options\n     */\n    initialize: function(id, options) {\n        if (options.rotate) {\n            this._rotate = true;\n            this._bearing = 0;\n        }\n        mapProto.initialize.apply(this, arguments);\n        if(this.options.rotate){\n          this.setBearing(this.options.bearing);\n        }\n    },\n\n    /**\n     * Given a pixel coordinate relative to the map container,\n     * returns the corresponding pixel coordinate relative to\n     * the [origin pixel](#map-getpixelorigin).\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * @returns {L.Point} transformed pixel point\n     */\n    containerPointToLayerPoint: function(point) {\n        if (!this._rotate) {\n            return mapProto.containerPointToLayerPoint.apply(this, arguments);\n        }\n        return L.point(point)\n            .subtract(this._getMapPanePos())\n            .rotateFrom(-this._bearing, this._getRotatePanePos())\n            .subtract(this._getRotatePanePos());\n    },\n\n    /**\n     * Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin),\n     * returns the corresponding pixel coordinate relative to the map container.\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * @returns {L.Point} transformed pixel point\n     */\n    layerPointToContainerPoint: function(point) {\n        if (!this._rotate) {\n            return mapProto.layerPointToContainerPoint.apply(this, arguments);\n        }\n        return L.point(point)\n            .add(this._getRotatePanePos())\n            .rotateFrom(this._bearing, this._getRotatePanePos())\n            .add(this._getMapPanePos());\n    },\n\n    /**\n     * Converts a coordinate from the rotated pane reference system\n     * to the reference system of the not rotated map pane.\n     * \n     * (rotatePane) --> (mapPane)\n     * (rotatePane) --> (norotatePane)\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * @returns {L.Point}\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    rotatedPointToMapPanePoint: function(point) {\n        return L.point(point)\n            .rotate(this._bearing)\n            ._add(this._getRotatePanePos());\n    },\n\n    /**\n     * Converts a coordinate from the not rotated map pane reference system\n     * to the reference system of the rotated pane.\n     * \n     * (mapPane) --> (rotatePane)\n     * (norotatePane) --> (rotatePane)\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    mapPanePointToRotatedPoint: function(point) {\n        return L.point(point)\n            ._subtract(this._getRotatePanePos())\n            .rotate(-this._bearing);\n    },\n\n    // latLngToLayerPoint: function (latlng) {\n    //     var projectedPoint = this.project(L.latLng(latlng))._round();\n    //     return projectedPoint._subtract(this.getPixelOrigin());\n    // },\n\n    // latLngToContainerPoint: function (latlng) {\n\t// \treturn this.layerPointToContainerPoint(this.latLngToLayerPoint(toLatLng(latlng)));\n\t// },\n\n    /**\n     * Given latlng bounds, returns the bounds in projected pixel\n     * relative to the map container.\n     * \n     * @see https://github.com/ronikar/Leaflet/blob/5c480ef959b947c3beed7065425a5a36c486262b/src/map/Map.js#L1114-L1135\n     * \n     * @param {L.LatLngBounds} bounds \n     * @returns {L.Bounds}\n     * \n     * @since leaflet-rotate (v0.2)\n     */\n    mapBoundsToContainerBounds: function (bounds) {\n        if (!this._rotate && mapProto.mapBoundsToContainerBounds) {\n            return mapProto.mapBoundsToContainerBounds.apply(this, arguments);\n        }\n\n        // const nw = this.latLngToContainerPoint(bounds.getNorthWest()),\n        //       ne = this.latLngToContainerPoint(bounds.getNorthEast()),\n        //       sw = this.latLngToContainerPoint(bounds.getSouthWest()),\n        //       se = this.latLngToContainerPoint(bounds.getSouthEast());\n\n        // same as `this.latLngToContainerPoint(latlng)` but with floating point precision\n        const origin = this.getPixelOrigin();\n        const nw = this.layerPointToContainerPoint(this.project(bounds.getNorthWest())._subtract(origin)),\n              ne = this.layerPointToContainerPoint(this.project(bounds.getNorthEast())._subtract(origin)),\n              sw = this.layerPointToContainerPoint(this.project(bounds.getSouthWest())._subtract(origin)),\n              se = this.layerPointToContainerPoint(this.project(bounds.getSouthEast())._subtract(origin));\n\n        return L.bounds([\n            L.point(Math.min(nw.x, ne.x, se.x, sw.x), Math.min(nw.y, ne.y, se.y, sw.y)), // [ minX, minY ]\n            L.point(Math.max(nw.x, ne.x, se.x, sw.x), Math.max(nw.y, ne.y, se.y, sw.y))  // [ maxX, maxY ]\n        ]);\n    },\n\n    /**\n     * Returns geographical bounds visible in the current map view\n     * \n     * @TODO find out  if map bounds calculated by `L.Map::getBounds()`\n     *       function should match the `rotatePane` or `norotatePane` bounds\n     * \n     * @see https://github.com/fnicollet/Leaflet/issues/7\n     * \n     * @returns {L.LatLngBounds}\n     */\n    getBounds: function() {\n        if (!this._rotate) {\n            return mapProto.getBounds.apply(this, arguments);\n        }\n\n        // SEE: https://github.com/fnicollet/Leaflet/pull/22\n        //\n        // var bounds = this.getPixelBounds(),\n        // sw = this.unproject(bounds.getBottomLeft()),\n        // ne = this.unproject(bounds.getTopRight());\n        // return new LatLngBounds(sw, ne);\n        //\n\n        // LatLngBounds' constructor automatically\n        // extends the bounds to fit the passed points\n        var size = this.getSize();\n        return new L.LatLngBounds([\n            this.containerPointToLatLng([0, 0]),           // topleft\n            this.containerPointToLatLng([size.x, 0]),      // topright \n            this.containerPointToLatLng([size.x, size.y]), // bottomright\n            this.containerPointToLatLng([0, size.y]),      // bottomleft\n        ]);\n    },\n\n    /**\n     * Returns the bounds of the current map view in projected pixel\n     * coordinates (sometimes useful in layer and overlay implementations).\n     * \n     * @TODO find out if map bounds calculated by `L.Map::getPixelBounds()`\n     *       function should match the `rotatePane` or `norotatePane` bounds\n     *\n     * @see https://github.com/fnicollet/Leaflet/issues/7\n     * \n     * @returns {L.Bounds}\n     */\n    // getPixelBounds(center, zoom) {\n    //     // const topLeftPoint = map.containerPointToLayerPoint(this._getTopLeftPoint());\n    //     const topLeftPoint = this._getTopLeftPoint(center, zoom);\n    //       return new L.Bounds(topLeftPoint, topLeftPoint.add(this.getSize()));\n    // },\n\n    /**\n     * Change map rotation\n     * \n     * @param {number} theta map degrees\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    setBearing: function(theta) {\n        if (!L.Browser.any3d || !this._rotate) { return; }\n\n        var bearing = L.Util.wrapNum(theta, [0, 360]) * L.DomUtil.DEG_TO_RAD,\n            center = this._getPixelCenter(),\n            oldPos = this._getRotatePanePos().rotateFrom(-this._bearing, center),\n            newPos = oldPos.rotateFrom(bearing, center);\n\n        // CSS transform\n        L.DomUtil.setPosition(this._rotatePane, oldPos, bearing, center);\n\n        this._pivot = center;\n        this._bearing = bearing;\n        this._rotatePanePos = newPos;\n\n        this.fire('rotate');\n    },\n\n    /**\n     * Get current map rotation\n     * \n     * @returns {number} theta map degrees\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    getBearing: function() {\n        return this._bearing * L.DomUtil.RAD_TO_DEG;\n    },\n\n    /**\n     * Creates a new [map pane](#map-pane) with the given name if it doesn't\n     * exist already, then returns it. The pane is created as a child of\n     * `container`, or as a child of the main map pane if not set.\n     * \n     * @param {String} name leaflet pane\n     * @param {HTMLElement} [container] parent element\n     * @returns {HTMLElement} pane container\n     */\n    // createPane: function(name, container) {\n    //     if (!this._rotate || name == 'mapPane') {\n    //         return mapProto.createPane.apply(this, arguments);\n    //     }\n    //     // init \"rotatePane\"\n    //     if (!this._rotatePane) {\n    //         // this._pivot = this.getSize().divideBy(2);\n    //         this._rotatePane = mapProto.createPane.call(this, 'rotatePane', this._mapPane);\n    //         L.DomUtil.setPosition(this._rotatePane, new L.Point(0, 0), this._bearing, this._pivot);\n    //     }\n    //     return mapProto.createPane.call(this, name, container || this._rotatePane);\n    // },\n\n    /**\n     * Panes are DOM elements used to control the ordering of layers on\n     * the map. You can access panes with [`map.getPane`](#map-getpane)\n     * or [`map.getPanes`](#map-getpanes) methods. New panes can be created\n     * with the [`map.createPane`](#map-createpane) method.\n     * \n     * Every map has the following default panes that differ only in zIndex:\n     * \n     * - mapPane     [HTMLElement = 'auto'] - Pane that contains all other map panes\n     * - tilePane    [HTMLElement = 2]      - Pane for tile layers\n     * - overlayPane [HTMLElement = 4]      - Pane for overlays like polylines and polygons\n     * - shadowPane  [HTMLElement = 5]      - Pane for overlay shadows (e.g. marker shadows)\n     * - markerPane  [HTMLElement = 6]      - Pane for marker icons\n     * - tooltipPane [HTMLElement = 650]    - Pane for tooltips.\n     * - popupPane   [HTMLElement = 700]    - Pane for popups.\n     */\n    _initPanes: function() {\n        var panes = this._panes = {};\n        this._paneRenderers = {};\n\n        this._mapPane = this.createPane('mapPane', this._container);\n        L.DomUtil.setPosition(this._mapPane, new L.Point(0, 0));\n\n        if (this._rotate) {\n            this._rotatePane = this.createPane('rotatePane', this._mapPane);\n            this._norotatePane = this.createPane('norotatePane', this._mapPane);\n            // rotatePane\n            this.createPane('tilePane', this._rotatePane);\n            this.createPane('overlayPane', this._rotatePane);\n            // norotatePane\n            this.createPane('shadowPane', this._norotatePane);\n            this.createPane('markerPane', this._norotatePane);\n            this.createPane('tooltipPane', this._norotatePane);\n            this.createPane('popupPane', this._norotatePane);\n        } else {\n            this.createPane('tilePane');\n            this.createPane('overlayPane');\n            this.createPane('shadowPane');\n            this.createPane('markerPane');\n            this.createPane('tooltipPane');\n            this.createPane('popupPane');\n        }\n\n        if (!this.options.markerZoomAnimation) {\n            L.DomUtil.addClass(panes.markerPane, 'leaflet-zoom-hide');\n            L.DomUtil.addClass(panes.shadowPane, 'leaflet-zoom-hide');\n        }\n    },\n\n    /**\n     * Pans the map the minimum amount to make the `latlng` visible. Use\n     * padding options to fit the display to more restricted bounds.\n     * If `latlng` is already within the (optionally padded) display bounds,\n     * the map will not be panned.\n     * \n     * @see https://github.com/Raruto/leaflet-rotate/issues/18\n     * \n     * @param {L.LatLng} latlng coordinates\n     * @param {Object} [options={}] padding options\n     * \n     * @returns {L.Map} current map instance\n     */\n    panInside(latlng, options) {\n        if (!this._rotate || Math.abs(this._bearing).toFixed(1) < 0.1) {\n            return mapProto.panInside.apply(this, arguments);\n        }\n\n        options = options || {};\n\n        const paddingTL = L.point(options.paddingTopLeft || options.padding || [0, 0]),\n            paddingBR = L.point(options.paddingBottomRight || options.padding || [0, 0]),\n            /** @TODO use mapProto.panInside */\n            // pixelPoint = this.project(latlng),\n            // pixelBounds = this.getPixelBounds(),\n            // pixelCenter = this.project(this.getCenter()),\n            rect = this._container.getBoundingClientRect(),\n            pixelPoint = this.latLngToContainerPoint(latlng),\n            pixelBounds = L.bounds([ L.point(rect), L.point(rect).add(this.getSize()) ]),\n            pixelCenter = pixelBounds.getCenter(),\n            //\n            paddedBounds = L.bounds([pixelBounds.min.add(paddingTL), pixelBounds.max.subtract(paddingBR)]),\n            paddedSize = paddedBounds.getSize();\n        \n        if (!paddedBounds.contains(pixelPoint)) {\n            this._enforcingBounds = true;\n            const centerOffset = pixelPoint.subtract(paddedBounds.getCenter());\n            const offset = paddedBounds.extend(pixelPoint).getSize().subtract(paddedSize);\n            pixelCenter.x += centerOffset.x < 0 ? -offset.x : offset.x;\n            pixelCenter.y += centerOffset.y < 0 ? -offset.y : offset.y;\n            /** @TODO use mapProto.panInside */\n            // this.panTo(this.unproject(pixelCenter), options);\n            this.panTo(this.containerPointToLatLng(pixelCenter), options);\n            //\n            this._enforcingBounds = false;\n        }\n        return this;\n    },\n\n    /**\n     * Pans the map to the closest view that would lie inside the given bounds\n     * (if it's not already), controlling the animation using the options specific,\n     * if any.\n     * \n     * @TODO check if map bounds calculated by `L.Map::panInsideBounds()`\n     *       function should match the `rotatePane` or `norotatePane` bounds\n     *\n     * @see https://github.com/fnicollet/Leaflet/issues/7\n     * \n     * @param {L.LatLngBounds} bounds coordinates\n     * @param {Object} [options] pan options\n     * @returns {L.Map} current map instance\n     */\n    // panInsideBounds: function (bounds, options) {\n    //     this._enforcingBounds = true;\n    //     var center = this.getCenter(),\n    //         newCenter = this._limitCenter(center, this._zoom, L.latLngBounds(bounds));\n    //\n    //     if (!center.equals(newCenter)) {\n    //         this.panTo(newCenter, options);\n    //     }\n    //\n    //     this._enforcingBounds = false;\n    //     return this;\n    // },\n\n    // adjust center for view to get inside bounds\n    // _limitCenter(center, zoom, bounds) {\n    //\n    //     if (!bounds) { return center; }\n    //\n    //     const centerPoint = this.project(center, zoom),\n    //         viewHalf = this.getSize().divideBy(2),\n    //         viewBounds = new Bounds(centerPoint.subtract(viewHalf), centerPoint.add(viewHalf)),\n    //         offset = this._getBoundsOffset(viewBounds, bounds, zoom);\n    //\n    //     // If offset is less than a pixel, ignore.\n    //     // This prevents unstable projections from getting into\n    //     // an infinite loop of tiny offsets.\n    //     if (Math.abs(offset.x) <= 1 && Math.abs(offset.y) <= 1) {\n    //             return center;\n    //     }\n    //\n    //     return this.unproject(centerPoint.add(offset), zoom);\n    // },\n\n    // @method flyToBounds(bounds: LatLngBounds, options?: fitBounds options): this\n    // Sets the view of the map with a smooth animation like [`flyTo`](#map-flyto),\n    // but takes a bounds parameter like [`fitBounds`](#map-fitbounds).\n    // flyToBounds(bounds, options) {\n    //     const target = this._getBoundsCenterZoom(bounds, options);\n    //     return this.flyTo(target.center, target.zoom, options);\n    // },\n\n    // _getBoundsCenterZoom(bounds, options) {\n    //\n    //     options = options || {};\n    //     bounds = bounds.getBounds ? bounds.getBounds() : toLatLngBounds(bounds);\n    //\n    //     const paddingTL = L.point(options.paddingTopLeft || options.padding || [0, 0]),\n    //           paddingBR = L.point(options.paddingBottomRight || options.padding || [0, 0]);\n    //\n    //     let zoom = this.getBoundsZoom(bounds, false, paddingTL.add(paddingBR));\n    //\n    //     zoom = (typeof options.maxZoom === 'number') ? Math.min(options.maxZoom, zoom) : zoom;\n    //\n    //     if (zoom === Infinity) {\n    //         return { center: bounds.getCenter(), zoom };\n    //     }\n    //\n    //     return { center, zoom };\n    //\n    // },\n\n    /**\n     * Returns the maximum zoom level on which the given bounds fit to the map\n     * view in its entirety. If `inside` (optional) is set to `true`, the method\n     * instead returns the minimum zoom level on which the map view fits into\n     * the given bounds in its entirety.\n     * \n     * @param {L.LatLngBounds} bounds\n     * @param {Boolean} [inside=false]\n     * @param {L.Point} [padding=[0,0]]\n     * \n     * @returns {Number} zoom level\n     */\n    getBoundsZoom(bounds, inside, padding) {\n        if (!this._rotate || Math.abs(this._bearing).toFixed(1) < 0.1) {\n            return mapProto.getBoundsZoom.apply(this, arguments);\n        }\n\n        bounds = L.latLngBounds(bounds);\n        padding = L.point(padding || [0, 0]);\n\n        let zoom = this.getZoom() || 0;\n        const min = this.getMinZoom(),\n                max = this.getMaxZoom(),\n                /** @TODO use mapProto.getBoundsZoom */\n                // nw = bounds.getNorthWest(),\n                // se = bounds.getSouthEast(),\n                // size = this.getSize().subtract(padding),\n                // boundsSize = L.bounds(this.project(se, zoom), this.project(nw, zoom)).getSize(),\n                size = this.getSize().subtract(padding),\n                boundsSize = this.mapBoundsToContainerBounds(bounds).getSize(),\n                snap = this.options.zoomSnap,\n                scalex = size.x / boundsSize.x,\n                scaley = size.y / boundsSize.y,\n                scale = inside ? Math.max(scalex, scaley) : Math.min(scalex, scaley);\n\n        zoom = this.getScaleZoom(scale, zoom);\n\n        if (snap) {\n            zoom = Math.round(zoom / (snap / 100)) * (snap / 100); // don't jump if within 1% of a snap level\n            zoom = inside ? Math.ceil(zoom / snap) * snap : Math.floor(zoom / snap) * snap;\n        }\n\n        return Math.max(min, Math.min(max, zoom));\n    },\n\n    /**\n     * Layer point of the current center\n     * \n     * @returns {L.Point} layer center\n     */\n    // _getCenterLayerPoint: function () {\n    //    return this.containerPointToLayerPoint(this.getSize()._divideBy(2));\n    // },\n\n    /**\n     * Offset of the specified place to the current center in pixels\n     * \n     * @param {L.LatLng} latlng map coordinates\n     */\n    _getCenterOffset: function(latlng) {\n        var centerOffset = mapProto._getCenterOffset.apply(this, arguments);\n        if (this._rotate) {\n            centerOffset = centerOffset.rotate(this._bearing);\n        }\n        return centerOffset;\n    },\n\n    /**\n     * @since leaflet-rotate (v0.1)\n     */\n    _getRotatePanePos: function() {\n        return this._rotatePanePos || new L.Point(0, 0);\n        // return L.DomUtil.getPosition(this._rotatePane) || new L.Point(0, 0);\n    },\n\n    // _latLngToNewLayerPoint(latlng, zoom, center) {\n    //    const topLeft = this._getNewPixelOrigin(center, zoom);\n    //    return this.project(latlng, zoom)._subtract(topLeft);\n    //},\n\n    _getNewPixelOrigin: function(center, zoom) {\n        if (!this._rotate) {\n            return mapProto._getNewPixelOrigin.apply(this, arguments);\n        }\n        var viewHalf = this.getSize()._divideBy(2);\n        return this.project(center, zoom)\n            .rotate(this._bearing)\n            ._subtract(viewHalf)\n            ._add(this._getMapPanePos())\n            ._add(this._getRotatePanePos())\n            .rotate(-this._bearing)\n            ._round();\n    },\n\n    /**\n     * @since leaflet-rotate (v0.2)\n     * \n     * @see src\\layer\\tile\\GridLayer::_getTiledPixelBounds()\n     */\n    _getNewPixelBounds: function(center, zoom) {\n        center = center || this.getCenter();\n        zoom = zoom || this.getZoom();\n        if (!this._rotate && mapProto._getNewPixelBounds) {\n            return mapProto._getNewPixelBounds.apply(this, arguments);\n        }\n        var mapZoom = this._animatingZoom ? Math.max(this._animateToZoom, this.getZoom()) : this.getZoom(),\n            scale = this.getZoomScale(mapZoom, zoom),\n            pixelCenter = this.project(center, zoom).floor(),\n            size = this.getSize(),\n            halfSize = new L.Bounds([\n                this.containerPointToLayerPoint([0, 0]).floor(),\n                this.containerPointToLayerPoint([size.x, 0]).floor(),\n                this.containerPointToLayerPoint([0, size.y]).floor(),\n                this.containerPointToLayerPoint([size.x, size.y]).floor()\n            ]).getSize().divideBy(scale * 2);\n\n        return new L.Bounds(pixelCenter.subtract(halfSize), pixelCenter.add(halfSize));\n    },\n\n    /**\n     * @since leaflet-rotate (v0.2)\n     * \n     * @return {L.Point} map pivot point (center)\n     */\n    _getPixelCenter: function() {\n        if (!this._rotate && mapProto._getPixelCenter) {\n            return mapProto._getPixelCenter.apply(this, arguments);\n        }\n        return this.getSize()._divideBy(2)._subtract(this._getMapPanePos());\n    },\n\n    /**\n     * @since leaflet-rotate (v0.2)\n     * \n     * @see src\\layer\\vector\\Renderer::_update()\n     */\n    _getPaddedPixelBounds: function(padding) {\n        if (!this._rotate && mapProto._getPaddedPixelBounds) {\n            return mapProto._getPaddedPixelBounds.apply(this, arguments);\n        }\n        var p = padding,\n            size = this.getSize(),\n            padMin = size.multiplyBy(-p),\n            padMax = size.multiplyBy(1 + p);\n            //min = this.containerPointToLayerPoint(size.multiplyBy(-p)).round();\n\n        return new L.Bounds([\n            this.containerPointToLayerPoint([padMin.x, padMin.y]).floor(),\n            this.containerPointToLayerPoint([padMin.x, padMax.y]).floor(),\n            this.containerPointToLayerPoint([padMax.x, padMin.y]).floor(),\n            this.containerPointToLayerPoint([padMax.x, padMax.y]).floor()\n        ]);\n    },\n\n    _handleGeolocationResponse: function(pos) {\n        if (!this._container._leaflet_id) { return; }\n\n        var lat = pos.coords.latitude,\n            lng = pos.coords.longitude,\n            /** @TODO use mapProto._handleGeolocationResponse */\n            hdg = pos.coords.heading,\n            latlng = new L.LatLng(lat, lng),\n            bounds = latlng.toBounds(pos.coords.accuracy),\n            options = this._locateOptions;\n\n        if (options.setView) {\n            var zoom = this.getBoundsZoom(bounds);\n            this.setView(latlng, options.maxZoom ? Math.min(zoom, options.maxZoom) : zoom);\n        }\n\n        var data = {\n            latlng: latlng,\n            bounds: bounds,\n            timestamp: pos.timestamp,\n            /** @TODO use mapProto._handleGeolocationResponse */\n            heading: hdg\n        };\n\n        for (var i in pos.coords) {\n            if (typeof pos.coords[i] === 'number') {\n                data[i] = pos.coords[i];\n            }\n        }\n\n        // @event locationfound: LocationEvent\n        // Fired when geolocation (using the [`locate`](#map-locate) method)\n        // went successfully.\n        this.fire('locationfound', data);\n    },\n\n    /**\n     * @see https://github.com/ronikar/Leaflet/blob/5c480ef959b947c3beed7065425a5a36c486262b/src/geo/LatLngBounds.js#L253-L264\n     * \n     * @param {L.Bounds} points \n     * @returns {L.Bounds}\n     */\n    // toCircumscribedBounds(points) {\n    //     var minX = points.reduce(function (pv, v) { return Math.min(pv, v.x); }, points[0].x),\n    //         maxX = points.reduce(function (pv, v) { return Math.max(pv, v.x); }, points[0].x),\n    //         minY = points.reduce(function (pv, v) { return Math.min(pv, v.y); }, points[0].y),\n    //         maxY = points.reduce(function (pv, v) { return Math.max(pv, v.y); }, points[0].y);\n    //\n    //     return L.bounds(L.point(minX, minY), L.point(maxX, maxY));\n    // },\n\n});\n","/**\n * Triggers `invalidateResize` when the map's DOM container mutates.\n * \n * @typedef L.Map.ContainerMutation\n */\n\n/**\n * @TODO check again this file after leaflet v1.9.3 (eg. L.Browser.mutation).\n * Mutation Observer support will likely be added by default in next releases.\n */\n\nL.Map.mergeOptions({\n\n    /**\n     * Whether the map uses mutation observers to\n     * detect changes in its container and trigger\n     * `invalidateSize`. Disabled by default due to\n     * support not being available in all web browsers.\n     *\n     * @type {Boolean}\n     * \n     * @see https://developer.mozilla.org/docs/Web/API/MutationObserver\n     */\n    trackContainerMutation: false\n\n});\n\nL.Map.ContainerMutation = L.Handler.extend({\n\n    addHooks: function() {\n        // if (!L.Browser.mutation) { return; }\n        if (!this._observer) {\n            this._observer = new MutationObserver(L.Util.bind(this._map.invalidateSize, this._map));\n        }\n        this._observer.observe(this._map.getContainer(), {\n            childList: false,\n            attributes: true,\n            characterData: false,\n            subtree: false,\n            attributeFilter: ['style']\n        });\n    },\n\n    removeHooks: function() {\n        // if (!L.Browser.mutation) { return; }\n        this._observer.disconnect();\n    },\n\n});\n\n/**\n * Add Container mutation handler to L.Map (disabled unless `trackContainerMutation` is set).\n * \n * @property {L.Map.ContainerMutation} trackContainerMutation\n */\nL.Map.addInitHook('addHandler', 'trackContainerMutation', L.Map.ContainerMutation);\n","/**\n * A tri-state control for map rotation, states are:\n *\n * - Locked (default)\n * - Unlocked (user can pinch-rotate)\n * - Follow (rotation follows device orientation, if available)\n *\n * @typedef L.Control.Rotate\n */\n\nL.Control.Rotate = L.Control.extend({\n    options: {\n        position: \"topleft\",\n        closeOnZeroBearing: true,\n    },\n\n    onAdd: function (map) {\n        var container = (this._container = L.DomUtil.create(\n            \"div\",\n            \"leaflet-control-rotate leaflet-bar\"\n        ));\n\n        // this.button = L.Control.Zoom.prototype._createButton.call(this, 'R', 'leaflet-control-rotate', 'leaflet-control-rotate', container, this._toggleLock);\n\n        var arrow = (this._arrow = L.DomUtil.create(\n            \"span\",\n            \"leaflet-control-rotate-arrow\"\n        ));\n\n        arrow.style.backgroundImage = `url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23333'%3E%3Cpath d='M10.5 14l4-8 4 8h-8z'/%3E%3Cpath d='M10.5 16l4 8 4-8h-8z' fill='%23ccc'/%3E%3C/svg%3E\")`;\n        arrow.style.cursor = \"grab\";\n        arrow.style.display = \"block\";\n        arrow.style.width = \"100%\";\n        arrow.style.height = \"100%\";\n        arrow.style.backgroundRepeat = \"no-repeat\";\n        arrow.style.backgroundPosition = \"50%\";\n\n        // Copy-pasted from L.Control.Zoom\n        var link = (this._link = L.DomUtil.create(\n            \"a\",\n            \"leaflet-control-rotate-toggle\",\n            container\n        ));\n        link.appendChild(arrow);\n        link.href = \"#\";\n        link.title = \"Rotate map\";\n\n        L.DomEvent.on(link, \"dblclick\", L.DomEvent.stopPropagation)\n            .on(link, \"mousedown\", this._handleMouseDown, this)\n            .on(link, \"click\", L.DomEvent.stop)\n            .on(link, \"click\", this._cycleState, this)\n            .on(link, \"click\", this._refocusOnMap, this);\n\n        if (!L.Browser.any3d) {\n            L.DomUtil.addClass(link, \"leaflet-disabled\");\n        }\n\n        this._restyle();\n\n        map.on(\"rotate\", this._restyle, this);\n\n        // State flag\n        this._follow = false;\n        this._canFollow = false;\n\n        if (this.options.closeOnZeroBearing && map.getBearing() === 0) {\n            container.style.display = \"none\";\n        }\n\n        return container;\n    },\n\n    onRemove: function (map) {\n        map.off(\"rotate\", this._restyle, this);\n    },\n\n    _handleMouseDown: function (e) {\n        L.DomEvent.stop(e);\n        this.dragging = true;\n        this.dragstartX = e.pageX;\n        this.dragstartY = e.pageY;\n        L.DomEvent.on(document, \"mousemove\", this._handleMouseDrag, this).on(\n            document,\n            \"mouseup\",\n            this._handleMouseUp,\n            this\n        );\n    },\n\n    _handleMouseUp: function (e) {\n        L.DomEvent.stop(e);\n        this.dragging = false;\n\n        L.DomEvent.off(document, \"mousemove\", this._handleMouseDrag, this).off(\n            document,\n            \"mouseup\",\n            this._handleMouseUp,\n            this\n        );\n    },\n\n    _handleMouseDrag: function (e) {\n        if (!this.dragging) {\n            return;\n        }\n        var deltaX = e.clientX - this.dragstartX;\n        this._map.setBearing(deltaX);\n    },\n\n    _cycleState: function (ev) {\n        if (!this._map) {\n            return;\n        }\n\n        var map = this._map;\n\n        // // Touch mode\n        // if (!map.touchRotate.enabled() && !map.compassBearing.enabled()) {\n        //     map.touchRotate.enable();\n        // }\n\n        // Compass mode\n        // else if (!map.compassBearing.enabled()) {\n        //     map.touchRotate.disable();\n        //     (\n        //         DeviceOrientationEvent && DeviceOrientationEvent.requestPermission\n        //             ? DeviceOrientationEvent.requestPermission() // iOS compass\n        //             : Promise.resolve('granted')                 // others\n        //     ).then(state => \"granted\" === state && map.compassBearing.enable())\n        // }\n\n        // Locked mode\n        // else {\n        // map.compassBearing.disable();\n        map.setBearing(0);\n        // if (this.options.closeOnZeroBearing) {\n        //     map.touchRotate.enable();\n        // }\n        // }\n        this._restyle();\n    },\n\n    _restyle: function () {\n        if (!this._map.options.rotate) {\n            L.DomUtil.addClass(this._link, \"leaflet-disabled\");\n        } else {\n            var map = this._map;\n            var bearing = map.getBearing();\n\n            this._arrow.style.transform = \"rotate(\" + bearing + \"deg)\";\n\n            this._link.style.backgroundColor = null;\n\n            if (bearing && this.options.closeOnZeroBearing) {\n                this._container.style.display = \"block\";\n            }\n            if (0 === bearing && this.options.closeOnZeroBearing) {\n                this._container.style.display = \"none\";\n            }\n            // }\n        }\n    },\n});\n\nL.control.rotate = function (options) {\n    return new L.Control.Rotate(options);\n};\n\nL.Map.mergeOptions({\n    rotateControl: true,\n});\n\nL.Map.addInitHook(function () {\n    if (this.options.rotateControl) {\n        var options =\n            typeof this.options.rotateControl === \"object\"\n                ? this.options.rotateControl\n                : {};\n        this.rotateControl = L.control.rotate(options);\n        this.addControl(this.rotateControl);\n    }\n});\n"],"names":["L","Draggable","include","extend","Point","prototype","rotate","theta","this","rotateFrom","pivot","sinTheta","Math","sin","cosTheta","cos","cx","x","cy","y","divOverlayProto","DivOverlay","getEvents","apply","arguments","_updatePosition","_map","_rotate","_zoomAnimated","anchor","_getAnchor","pos","DomUtil","getPosition","_container","subtract","setPosition","rotatedPointToMapPanePoint","add","popupProto","Popup","_animateZoom","e","_adjustPan","options","autoPan","_panAnim","_inProgress","_autopanning","map","marginBottom","parseInt","getStyle","containerHeight","offsetHeight","containerWidth","_containerWidth","layerPos","_containerLeft","_containerBottom","_add","containerPos","_getMapPanePos","padding","point","autoPanPadding","paddingTL","autoPanPaddingTopLeft","paddingBR","autoPanPaddingBottomRight","size","getSize","dx","dy","keepInView","fire","panBy","tooltipProto","Tooltip","_latLngToNewLayerPoint","_latlng","zoom","center","_setPosition","latLngToLayerPoint","gridLayerProto","GridLayer","events","updateWhenIdle","_onRotate","Util","throttle","_onMoveEnd","updateInterval","_getTiledPixelBounds","_getNewPixelBounds","_tileZoom","mapProto","Map","mergeOptions","bearing","initialize","id","_bearing","setBearing","containerPointToLayerPoint","_getRotatePanePos","layerPointToContainerPoint","mapPanePointToRotatedPoint","_subtract","mapBoundsToContainerBounds","bounds","origin","getPixelOrigin","nw","project","getNorthWest","ne","getNorthEast","sw","getSouthWest","se","getSouthEast","min","max","getBounds","LatLngBounds","containerPointToLatLng","Browser","any3d","wrapNum","DEG_TO_RAD","_getPixelCenter","oldPos","newPos","_rotatePane","_pivot","_rotatePanePos","getBearing","RAD_TO_DEG","_initPanes","panes","_panes","_paneRenderers","_mapPane","createPane","_norotatePane","markerZoomAnimation","addClass","markerPane","shadowPane","panInside","latlng","abs","toFixed","paddingTopLeft","paddingBottomRight","rect","getBoundingClientRect","pixelPoint","latLngToContainerPoint","pixelBounds","pixelCenter","getCenter","paddedBounds","paddedSize","contains","_enforcingBounds","centerOffset","offset","panTo","getBoundsZoom","inside","latLngBounds","getZoom","getMinZoom","getMaxZoom","boundsSize","snap","zoomSnap","scalex","scaley","scale","getScaleZoom","round","ceil","floor","_getCenterOffset","_getNewPixelOrigin","viewHalf","_divideBy","_round","mapZoom","_animatingZoom","_animateToZoom","getZoomScale","halfSize","Bounds","divideBy","_getPaddedPixelBounds","p","padMin","multiplyBy","padMax","_handleGeolocationResponse","_leaflet_id","lat","coords","latitude","lng","longitude","hdg","heading","LatLng","toBounds","accuracy","_locateOptions","setView","maxZoom","data","timestamp","i","trackContainerMutation","ContainerMutation","Handler","addHooks","_observer","MutationObserver","bind","invalidateSize","observe","getContainer","childList","attributes","characterData","subtree","attributeFilter","removeHooks","disconnect","addInitHook","Control","Rotate","position","closeOnZeroBearing","onAdd","container","create","arrow","_arrow","style","backgroundImage","cursor","display","width","height","backgroundRepeat","backgroundPosition","link","_link","appendChild","href","title","DomEvent","on","stopPropagation","_handleMouseDown","stop","_cycleState","_refocusOnMap","_restyle","_follow","_canFollow","onRemove","off","dragging","dragstartX","pageX","dragstartY","pageY","document","_handleMouseDrag","_handleMouseUp","deltaX","clientX","ev","transform","backgroundColor","control","rotateControl","addControl"],"mappings":"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"}