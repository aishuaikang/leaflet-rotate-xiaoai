{"version":3,"file":"leaflet-rotate-xiaoai.js","sources":["../src/dom/DomUtil.js","../src/dom/Draggable.js","../src/geometry/Point.js","../src/layer/DivOverlay.js","../src/layer/Popup.js","../src/layer/Tooltip.js","../src/layer/tile/GridLayer.js","../src/map/Map.js","../src/map/handler/ContainerMutation.js","../src/control/Rotate.js"],"sourcesContent":["/**\n * @external L.DomUtil\n *\n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/dom/DomUtil.js\n */\n\nconst domUtilProto = L.extend({}, L.DomUtil);\n\nL.extend(L.DomUtil, {\n    /**\n     * Resets the 3D CSS transform of `el` so it is\n     * translated by `offset` pixels and optionally\n     * scaled by `scale`. Does not have an effect if\n     * the browser doesn't support 3D CSS transforms.\n     *\n     * @param {HTMLElement} el\n     * @param {L.Point} offset\n     * @param {Number} scale\n     * @param {Number} bearing\n     * @param {L.Point} pivot\n     */\n    setTransform: function (el, offset, scale, bearing, pivot) {\n        console.log(\"setTransform\", { el, offset, scale, bearing, pivot });\n        var pos = offset || new L.Point(0, 0);\n\n        if (!bearing) {\n            offset = pos._round();\n            return domUtilProto.setTransform.apply(this, arguments);\n        }\n\n        pos = pos.rotateFrom(bearing, pivot);\n\n        el.style[L.DomUtil.TRANSFORM] =\n            \"translate3d(\" +\n            pos.x +\n            \"px,\" +\n            pos.y +\n            \"px\" +\n            \",0)\" +\n            (scale ? \" scale(\" + scale + \")\" : \"\") +\n            \" rotate(\" +\n            bearing +\n            \"rad)\";\n    },\n\n    /**\n     * Sets the position of `el` to coordinates specified by\n     * `position`, using CSS translate or top/left positioning\n     * depending on the browser (used by Leaflet internally\n     * to position its layers).\n     *\n     * @param {HTMLElement} el\n     * @param {L.Point} point\n     * @param {Number} bearing\n     * @param {L.Point} pivot\n     * @param {Number} scale\n     */\n    setPosition: function (el, point, bearing, pivot, scale) {\n        console.log(\"setPosition\", { el, point, bearing, pivot, scale });\n        if (!bearing) {\n            return domUtilProto.setPosition.apply(this, arguments);\n        }\n\n        /*eslint-disable */\n        el._leaflet_pos = point;\n        /*eslint-enable */\n\n        if (L.Browser.any3d) {\n            L.DomUtil.setTransform(el, point, scale, bearing, pivot);\n        } else {\n            el.style.left = point.x + \"px\";\n            el.style.top = point.y + \"px\";\n        }\n    },\n\n    /**\n     * @constant radians = degrees × π/180°\n     */\n    DEG_TO_RAD: Math.PI / 180,\n\n    /**\n     * @constant degrees = radians × 180°/π\n     */\n    RAD_TO_DEG: 180 / Math.PI,\n});\n","/**\n * @external L.Draggable\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/dom/Draggable.js\n */\n\n/**\n * A class for making DOM elements draggable (including touch support).\n * Used internally for map and marker dragging. Only works for elements\n * that were positioned with [`L.DomUtil.setPosition`](#domutil-setposition).\n */\n\nL.Draggable.include({\n\n    /** @TODO */\n    // updateMapBearing: function(mapBearing) {\n    //     this._mapBearing = mapBearing;\n    // },\n\n});","/**\n * @external L.Point\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/geometry/Point.js\n */\n\nL.extend(L.Point.prototype, {\n\n    /**\n     * Rotate around (0,0) by applying the 2D rotation matrix:\n     * \n     * ⎡ x' ⎤ = ⎡ cos θ  -sin θ ⎤ ⎡ x ⎤\n     * ⎣ y' ⎦   ⎣ sin θ   cos θ ⎦ ⎣ y ⎦\n     * \n     * @param theta must be given in radians.\n     */\n    rotate: function(theta) {\n        return this.rotateFrom(theta, new L.Point(0,0))\n    },\n\n    /**\n     * Rotate around (pivot.x, pivot.y) by:\n     * \n     * 1. subtract (pivot.x, pivot.y)\n     * 2. rotate around (0, 0)\n     * 3. add (pivot.x, pivot.y) back\n     * \n     * same as `this.subtract(pivot).rotate(theta).add(pivot)`\n     * \n     * @param {Number} theta \n     * @param {L.Point} pivot \n     * \n     * @returns {L.Point}\n     */\n    rotateFrom: function(theta, pivot) {\n        if (!theta) { return this; }\n        var sinTheta = Math.sin(theta);\n        var cosTheta = Math.cos(theta);\n        var cx = pivot.x,\n            cy = pivot.y;\n        var x = this.x - cx,\n            y = this.y - cy;\n\n        return new L.Point(\n            x * cosTheta - y * sinTheta + cx,\n            x * sinTheta + y * cosTheta + cy\n        );\n    },\n\n});\n","/**\n * @external L.DivOverlay\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/DivOverlay.js\n */\n\nconst divOverlayProto = L.extend({}, L.DivOverlay.prototype);\n\nL.DivOverlay.include({\n\n    /**\n     * Update L.Popup and L.Tooltip anchor positions after\n     * the map is moved by calling `map.setBearing(theta)`\n     * \n     * @listens L.Map~rotate\n     */\n    getEvents: function() {\n        return L.extend(divOverlayProto.getEvents.apply(this, arguments), { rotate: this._updatePosition });\n    },\n\n    /**\n     * 0. update element anchor point (divOverlayProto v1.9.3)\n     * 1. rotate around anchor point (subtract anchor -> rotate point -> add anchor)\n     */\n    _updatePosition: function() {\n        if (!this._map) { return; }\n        divOverlayProto._updatePosition.apply(this, arguments);\n        if (this._map && this._map._rotate && this._zoomAnimated) {\n            var anchor = this._getAnchor();\n            var pos = L.DomUtil.getPosition(this._container).subtract(anchor);\n            L.DomUtil.setPosition(this._container, this._map.rotatedPointToMapPanePoint(pos).add(anchor));\n        }\n\n    },\n\n});\n","/**\n * @external L.Popup\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/Popup.js\n */\n\nconst popupProto = L.extend({}, L.Popup.prototype);\n\nL.Popup.include({\n\n    /**\n     * 0. update element anchor point (popupProto v1.9.3)\n     * 1. rotate around anchor point (subtract anchor -> rotate point -> add anchor)\n     */\n    _animateZoom: function(e) {\n        popupProto._animateZoom.apply(this, arguments);\n        if (this._map && this._map._rotate) {\n            var anchor = this._getAnchor();\n            var pos = L.DomUtil.getPosition(this._container).subtract(anchor);\n            L.DomUtil.setPosition(this._container, this._map.rotatedPointToMapPanePoint(pos).add(anchor));\n        }\n    },\n\n    /**\n     * Fix for L.popup({ keepInView = true })\n     * \n     * @see https://github.com/fnicollet/Leaflet/pull/21\n     */\n    _adjustPan: function() {\n        if (!this.options.autoPan || (this._map._panAnim && this._map._panAnim._inProgress)) { return; }\n\n        // We can endlessly recurse if keepInView is set and the view resets.\n        // Let's guard against that by exiting early if we're responding to our own autopan.\n        if (this._autopanning) {\n            this._autopanning = false;\n            return;\n        }\n\n        var map = this._map,\n            marginBottom = parseInt(L.DomUtil.getStyle(this._container, 'marginBottom'), 10) || 0,\n            containerHeight = this._container.offsetHeight + marginBottom,\n            containerWidth = this._containerWidth,\n            layerPos = new L.Point(this._containerLeft, -containerHeight - this._containerBottom);\n\n        layerPos._add(L.DomUtil.getPosition(this._container));\n\n        /** @TODO use popupProto._adjustPan */\n        // var containerPos = map.layerPointToContainerPoint(layerPos);\n        var containerPos = layerPos._add(this._map._getMapPanePos()),\n            padding = L.point(this.options.autoPanPadding),\n            paddingTL = L.point(this.options.autoPanPaddingTopLeft || padding),\n            paddingBR = L.point(this.options.autoPanPaddingBottomRight || padding),\n            size = map.getSize(),\n            dx = 0,\n            dy = 0;\n\n        if (containerPos.x + containerWidth + paddingBR.x > size.x) { // right\n            dx = containerPos.x + containerWidth - size.x + paddingBR.x;\n        }\n        if (containerPos.x - dx - paddingTL.x < 0) { // left\n            dx = containerPos.x - paddingTL.x;\n        }\n        if (containerPos.y + containerHeight + paddingBR.y > size.y) { // bottom\n            dy = containerPos.y + containerHeight - size.y + paddingBR.y;\n        }\n        if (containerPos.y - dy - paddingTL.y < 0) { // top\n            dy = containerPos.y - paddingTL.y;\n        }\n\n        // @namespace Map\n        // @section Popup events\n        // @event autopanstart: Event\n        // Fired when the map starts autopanning when opening a popup.\n        if (dx || dy) {\n            // Track that we're autopanning, as this function will be re-ran on moveend\n            if (this.options.keepInView) {\n                this._autopanning = true;\n            }\n            map\n                .fire('autopanstart')\n                .panBy([dx, dy]);\n        }\n    },\n\n});\n","/**\n * @external L.Tooltip\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/Tooltip.js\n */\n\nconst tooltipProto = L.extend({}, L.Tooltip.prototype);\n\nL.Tooltip.include({\n\n    _animateZoom: function(e) {\n        if (!this._map._rotate) {\n            return tooltipProto._animateZoom.apply(this, arguments);\n        }\n        var pos = this._map._latLngToNewLayerPoint(this._latlng, e.zoom, e.center);\n\n        pos = this._map.rotatedPointToMapPanePoint(pos);\n        this._setPosition(pos);\n    },\n\n    _updatePosition: function() {\n        if (!this._map._rotate) {\n            return tooltipProto._updatePosition.apply(this, arguments);\n        }\n        var pos = this._map.latLngToLayerPoint(this._latlng);\n\n        pos = this._map.rotatedPointToMapPanePoint(pos);\n        this._setPosition(pos);\n    },\n\n});\n","/**\n * @external L.GridLayer\n * \n * @see https://github.com/Leaflet/Leaflet/tree/v1.9.3/src/layer/tile/GridLayer.js\n */\n\nconst gridLayerProto = L.extend({}, L.GridLayer.prototype);\n\nL.GridLayer.include({\n\n    /**\n     * Redraw L.TileLayer bounds after the map is\n     * moved by just calling `map.setBearing(theta)`\n     * \n     * @listens L.Map~rotate\n     */\n    getEvents: function() {\n        var events = gridLayerProto.getEvents.apply(this, arguments);\n        if (this._map._rotate && !this.options.updateWhenIdle) {\n            if (!this._onRotate) {\n                this._onRotate = L.Util.throttle(this._onMoveEnd, this.options.updateInterval, this);\n            }\n            events.rotate = this._onRotate;\n        }\n        return events;\n    },\n\n    _getTiledPixelBounds: function(center) {\n        if (!this._map._rotate) {\n            return gridLayerProto._getTiledPixelBounds.apply(this, arguments);\n        }\n\n        return this._map._getNewPixelBounds(center, this._tileZoom);\n    },\n\n});\n","/**\n * @external L.Map\n * \n * @see https://github.com/Leaflet/Leaflet/blob/v1.9.3/src/map/Map.js\n */\n\nconst mapProto = L.extend({}, L.Map.prototype);\n\nL.Map.mergeOptions({ rotate: false, bearing: 0, });\n\nL.Map.include({\n\n    /**\n     * @param {(HTMLElement|String)} id html selector\n     * @param {Object} [options={}] leaflet map options\n     */\n    initialize: function(id, options) {\n        if (options.rotate) {\n            this._rotate = true;\n            this._bearing = 0;\n        }\n        mapProto.initialize.apply(this, arguments);\n        if(this.options.rotate){\n          this.setBearing(this.options.bearing);\n        }\n    },\n\n    /**\n     * Given a pixel coordinate relative to the map container,\n     * returns the corresponding pixel coordinate relative to\n     * the [origin pixel](#map-getpixelorigin).\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * @returns {L.Point} transformed pixel point\n     */\n    containerPointToLayerPoint: function(point) {\n        if (!this._rotate) {\n            return mapProto.containerPointToLayerPoint.apply(this, arguments);\n        }\n        return L.point(point)\n            .subtract(this._getMapPanePos())\n            .rotateFrom(-this._bearing, this._getRotatePanePos())\n            .subtract(this._getRotatePanePos());\n    },\n\n    /**\n     * Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin),\n     * returns the corresponding pixel coordinate relative to the map container.\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * @returns {L.Point} transformed pixel point\n     */\n    layerPointToContainerPoint: function(point) {\n        if (!this._rotate) {\n            return mapProto.layerPointToContainerPoint.apply(this, arguments);\n        }\n        return L.point(point)\n            .add(this._getRotatePanePos())\n            .rotateFrom(this._bearing, this._getRotatePanePos())\n            .add(this._getMapPanePos());\n    },\n\n    /**\n     * Converts a coordinate from the rotated pane reference system\n     * to the reference system of the not rotated map pane.\n     * \n     * (rotatePane) --> (mapPane)\n     * (rotatePane) --> (norotatePane)\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * @returns {L.Point}\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    rotatedPointToMapPanePoint: function(point) {\n        return L.point(point)\n            .rotate(this._bearing)\n            ._add(this._getRotatePanePos());\n    },\n\n    /**\n     * Converts a coordinate from the not rotated map pane reference system\n     * to the reference system of the rotated pane.\n     * \n     * (mapPane) --> (rotatePane)\n     * (norotatePane) --> (rotatePane)\n     * \n     * @param {L.Point} point pixel screen coordinates\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    mapPanePointToRotatedPoint: function(point) {\n        return L.point(point)\n            ._subtract(this._getRotatePanePos())\n            .rotate(-this._bearing);\n    },\n\n    // latLngToLayerPoint: function (latlng) {\n    //     var projectedPoint = this.project(L.latLng(latlng))._round();\n    //     return projectedPoint._subtract(this.getPixelOrigin());\n    // },\n\n    // latLngToContainerPoint: function (latlng) {\n\t// \treturn this.layerPointToContainerPoint(this.latLngToLayerPoint(toLatLng(latlng)));\n\t// },\n\n    /**\n     * Given latlng bounds, returns the bounds in projected pixel\n     * relative to the map container.\n     * \n     * @see https://github.com/ronikar/Leaflet/blob/5c480ef959b947c3beed7065425a5a36c486262b/src/map/Map.js#L1114-L1135\n     * \n     * @param {L.LatLngBounds} bounds \n     * @returns {L.Bounds}\n     * \n     * @since leaflet-rotate (v0.2)\n     */\n    mapBoundsToContainerBounds: function (bounds) {\n        if (!this._rotate && mapProto.mapBoundsToContainerBounds) {\n            return mapProto.mapBoundsToContainerBounds.apply(this, arguments);\n        }\n\n        // const nw = this.latLngToContainerPoint(bounds.getNorthWest()),\n        //       ne = this.latLngToContainerPoint(bounds.getNorthEast()),\n        //       sw = this.latLngToContainerPoint(bounds.getSouthWest()),\n        //       se = this.latLngToContainerPoint(bounds.getSouthEast());\n\n        // same as `this.latLngToContainerPoint(latlng)` but with floating point precision\n        const origin = this.getPixelOrigin();\n        const nw = this.layerPointToContainerPoint(this.project(bounds.getNorthWest())._subtract(origin)),\n              ne = this.layerPointToContainerPoint(this.project(bounds.getNorthEast())._subtract(origin)),\n              sw = this.layerPointToContainerPoint(this.project(bounds.getSouthWest())._subtract(origin)),\n              se = this.layerPointToContainerPoint(this.project(bounds.getSouthEast())._subtract(origin));\n\n        return L.bounds([\n            L.point(Math.min(nw.x, ne.x, se.x, sw.x), Math.min(nw.y, ne.y, se.y, sw.y)), // [ minX, minY ]\n            L.point(Math.max(nw.x, ne.x, se.x, sw.x), Math.max(nw.y, ne.y, se.y, sw.y))  // [ maxX, maxY ]\n        ]);\n    },\n\n    /**\n     * Returns geographical bounds visible in the current map view\n     * \n     * @TODO find out  if map bounds calculated by `L.Map::getBounds()`\n     *       function should match the `rotatePane` or `norotatePane` bounds\n     * \n     * @see https://github.com/fnicollet/Leaflet/issues/7\n     * \n     * @returns {L.LatLngBounds}\n     */\n    getBounds: function() {\n        if (!this._rotate) {\n            return mapProto.getBounds.apply(this, arguments);\n        }\n\n        // SEE: https://github.com/fnicollet/Leaflet/pull/22\n        //\n        // var bounds = this.getPixelBounds(),\n        // sw = this.unproject(bounds.getBottomLeft()),\n        // ne = this.unproject(bounds.getTopRight());\n        // return new LatLngBounds(sw, ne);\n        //\n\n        // LatLngBounds' constructor automatically\n        // extends the bounds to fit the passed points\n        var size = this.getSize();\n        return new L.LatLngBounds([\n            this.containerPointToLatLng([0, 0]),           // topleft\n            this.containerPointToLatLng([size.x, 0]),      // topright \n            this.containerPointToLatLng([size.x, size.y]), // bottomright\n            this.containerPointToLatLng([0, size.y]),      // bottomleft\n        ]);\n    },\n\n    /**\n     * Returns the bounds of the current map view in projected pixel\n     * coordinates (sometimes useful in layer and overlay implementations).\n     * \n     * @TODO find out if map bounds calculated by `L.Map::getPixelBounds()`\n     *       function should match the `rotatePane` or `norotatePane` bounds\n     *\n     * @see https://github.com/fnicollet/Leaflet/issues/7\n     * \n     * @returns {L.Bounds}\n     */\n    // getPixelBounds(center, zoom) {\n    //     // const topLeftPoint = map.containerPointToLayerPoint(this._getTopLeftPoint());\n    //     const topLeftPoint = this._getTopLeftPoint(center, zoom);\n    //       return new L.Bounds(topLeftPoint, topLeftPoint.add(this.getSize()));\n    // },\n\n    /**\n     * Change map rotation\n     * \n     * @param {number} theta map degrees\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    setBearing: function(theta) {\n        if (!L.Browser.any3d || !this._rotate) { return; }\n\n        var bearing = L.Util.wrapNum(theta, [0, 360]) * L.DomUtil.DEG_TO_RAD,\n            center = this._getPixelCenter(),\n            oldPos = this._getRotatePanePos().rotateFrom(-this._bearing, center),\n            newPos = oldPos.rotateFrom(bearing, center);\n\n        // CSS transform\n        L.DomUtil.setPosition(this._rotatePane, oldPos, bearing, center);\n\n        this._pivot = center;\n        this._bearing = bearing;\n        this._rotatePanePos = newPos;\n\n        this.fire('rotate');\n    },\n\n    /**\n     * Get current map rotation\n     * \n     * @returns {number} theta map degrees\n     * \n     * @since leaflet-rotate (v0.1)\n     */\n    getBearing: function() {\n        return this._bearing * L.DomUtil.RAD_TO_DEG;\n    },\n\n    /**\n     * Creates a new [map pane](#map-pane) with the given name if it doesn't\n     * exist already, then returns it. The pane is created as a child of\n     * `container`, or as a child of the main map pane if not set.\n     * \n     * @param {String} name leaflet pane\n     * @param {HTMLElement} [container] parent element\n     * @returns {HTMLElement} pane container\n     */\n    // createPane: function(name, container) {\n    //     if (!this._rotate || name == 'mapPane') {\n    //         return mapProto.createPane.apply(this, arguments);\n    //     }\n    //     // init \"rotatePane\"\n    //     if (!this._rotatePane) {\n    //         // this._pivot = this.getSize().divideBy(2);\n    //         this._rotatePane = mapProto.createPane.call(this, 'rotatePane', this._mapPane);\n    //         L.DomUtil.setPosition(this._rotatePane, new L.Point(0, 0), this._bearing, this._pivot);\n    //     }\n    //     return mapProto.createPane.call(this, name, container || this._rotatePane);\n    // },\n\n    /**\n     * Panes are DOM elements used to control the ordering of layers on\n     * the map. You can access panes with [`map.getPane`](#map-getpane)\n     * or [`map.getPanes`](#map-getpanes) methods. New panes can be created\n     * with the [`map.createPane`](#map-createpane) method.\n     * \n     * Every map has the following default panes that differ only in zIndex:\n     * \n     * - mapPane     [HTMLElement = 'auto'] - Pane that contains all other map panes\n     * - tilePane    [HTMLElement = 2]      - Pane for tile layers\n     * - overlayPane [HTMLElement = 4]      - Pane for overlays like polylines and polygons\n     * - shadowPane  [HTMLElement = 5]      - Pane for overlay shadows (e.g. marker shadows)\n     * - markerPane  [HTMLElement = 6]      - Pane for marker icons\n     * - tooltipPane [HTMLElement = 650]    - Pane for tooltips.\n     * - popupPane   [HTMLElement = 700]    - Pane for popups.\n     */\n    _initPanes: function() {\n        var panes = this._panes = {};\n        this._paneRenderers = {};\n\n        this._mapPane = this.createPane('mapPane', this._container);\n        L.DomUtil.setPosition(this._mapPane, new L.Point(0, 0));\n\n        if (this._rotate) {\n            this._rotatePane = this.createPane('rotatePane', this._mapPane);\n            this._norotatePane = this.createPane('norotatePane', this._mapPane);\n            // rotatePane\n            this.createPane('tilePane', this._rotatePane);\n            this.createPane('overlayPane', this._rotatePane);\n            // norotatePane\n            this.createPane('shadowPane', this._norotatePane);\n            this.createPane('markerPane', this._norotatePane);\n            this.createPane('tooltipPane', this._norotatePane);\n            this.createPane('popupPane', this._norotatePane);\n        } else {\n            this.createPane('tilePane');\n            this.createPane('overlayPane');\n            this.createPane('shadowPane');\n            this.createPane('markerPane');\n            this.createPane('tooltipPane');\n            this.createPane('popupPane');\n        }\n\n        if (!this.options.markerZoomAnimation) {\n            L.DomUtil.addClass(panes.markerPane, 'leaflet-zoom-hide');\n            L.DomUtil.addClass(panes.shadowPane, 'leaflet-zoom-hide');\n        }\n    },\n\n    /**\n     * Pans the map the minimum amount to make the `latlng` visible. Use\n     * padding options to fit the display to more restricted bounds.\n     * If `latlng` is already within the (optionally padded) display bounds,\n     * the map will not be panned.\n     * \n     * @see https://github.com/Raruto/leaflet-rotate/issues/18\n     * \n     * @param {L.LatLng} latlng coordinates\n     * @param {Object} [options={}] padding options\n     * \n     * @returns {L.Map} current map instance\n     */\n    panInside(latlng, options) {\n        if (!this._rotate || Math.abs(this._bearing).toFixed(1) < 0.1) {\n            return mapProto.panInside.apply(this, arguments);\n        }\n\n        options = options || {};\n\n        const paddingTL = L.point(options.paddingTopLeft || options.padding || [0, 0]),\n            paddingBR = L.point(options.paddingBottomRight || options.padding || [0, 0]),\n            /** @TODO use mapProto.panInside */\n            // pixelPoint = this.project(latlng),\n            // pixelBounds = this.getPixelBounds(),\n            // pixelCenter = this.project(this.getCenter()),\n            rect = this._container.getBoundingClientRect(),\n            pixelPoint = this.latLngToContainerPoint(latlng),\n            pixelBounds = L.bounds([ L.point(rect), L.point(rect).add(this.getSize()) ]),\n            pixelCenter = pixelBounds.getCenter(),\n            //\n            paddedBounds = L.bounds([pixelBounds.min.add(paddingTL), pixelBounds.max.subtract(paddingBR)]),\n            paddedSize = paddedBounds.getSize();\n        \n        if (!paddedBounds.contains(pixelPoint)) {\n            this._enforcingBounds = true;\n            const centerOffset = pixelPoint.subtract(paddedBounds.getCenter());\n            const offset = paddedBounds.extend(pixelPoint).getSize().subtract(paddedSize);\n            pixelCenter.x += centerOffset.x < 0 ? -offset.x : offset.x;\n            pixelCenter.y += centerOffset.y < 0 ? -offset.y : offset.y;\n            /** @TODO use mapProto.panInside */\n            // this.panTo(this.unproject(pixelCenter), options);\n            this.panTo(this.containerPointToLatLng(pixelCenter), options);\n            //\n            this._enforcingBounds = false;\n        }\n        return this;\n    },\n\n    /**\n     * Pans the map to the closest view that would lie inside the given bounds\n     * (if it's not already), controlling the animation using the options specific,\n     * if any.\n     * \n     * @TODO check if map bounds calculated by `L.Map::panInsideBounds()`\n     *       function should match the `rotatePane` or `norotatePane` bounds\n     *\n     * @see https://github.com/fnicollet/Leaflet/issues/7\n     * \n     * @param {L.LatLngBounds} bounds coordinates\n     * @param {Object} [options] pan options\n     * @returns {L.Map} current map instance\n     */\n    // panInsideBounds: function (bounds, options) {\n    //     this._enforcingBounds = true;\n    //     var center = this.getCenter(),\n    //         newCenter = this._limitCenter(center, this._zoom, L.latLngBounds(bounds));\n    //\n    //     if (!center.equals(newCenter)) {\n    //         this.panTo(newCenter, options);\n    //     }\n    //\n    //     this._enforcingBounds = false;\n    //     return this;\n    // },\n\n    // adjust center for view to get inside bounds\n    // _limitCenter(center, zoom, bounds) {\n    //\n    //     if (!bounds) { return center; }\n    //\n    //     const centerPoint = this.project(center, zoom),\n    //         viewHalf = this.getSize().divideBy(2),\n    //         viewBounds = new Bounds(centerPoint.subtract(viewHalf), centerPoint.add(viewHalf)),\n    //         offset = this._getBoundsOffset(viewBounds, bounds, zoom);\n    //\n    //     // If offset is less than a pixel, ignore.\n    //     // This prevents unstable projections from getting into\n    //     // an infinite loop of tiny offsets.\n    //     if (Math.abs(offset.x) <= 1 && Math.abs(offset.y) <= 1) {\n    //             return center;\n    //     }\n    //\n    //     return this.unproject(centerPoint.add(offset), zoom);\n    // },\n\n    // @method flyToBounds(bounds: LatLngBounds, options?: fitBounds options): this\n    // Sets the view of the map with a smooth animation like [`flyTo`](#map-flyto),\n    // but takes a bounds parameter like [`fitBounds`](#map-fitbounds).\n    // flyToBounds(bounds, options) {\n    //     const target = this._getBoundsCenterZoom(bounds, options);\n    //     return this.flyTo(target.center, target.zoom, options);\n    // },\n\n    // _getBoundsCenterZoom(bounds, options) {\n    //\n    //     options = options || {};\n    //     bounds = bounds.getBounds ? bounds.getBounds() : toLatLngBounds(bounds);\n    //\n    //     const paddingTL = L.point(options.paddingTopLeft || options.padding || [0, 0]),\n    //           paddingBR = L.point(options.paddingBottomRight || options.padding || [0, 0]);\n    //\n    //     let zoom = this.getBoundsZoom(bounds, false, paddingTL.add(paddingBR));\n    //\n    //     zoom = (typeof options.maxZoom === 'number') ? Math.min(options.maxZoom, zoom) : zoom;\n    //\n    //     if (zoom === Infinity) {\n    //         return { center: bounds.getCenter(), zoom };\n    //     }\n    //\n    //     return { center, zoom };\n    //\n    // },\n\n    /**\n     * Returns the maximum zoom level on which the given bounds fit to the map\n     * view in its entirety. If `inside` (optional) is set to `true`, the method\n     * instead returns the minimum zoom level on which the map view fits into\n     * the given bounds in its entirety.\n     * \n     * @param {L.LatLngBounds} bounds\n     * @param {Boolean} [inside=false]\n     * @param {L.Point} [padding=[0,0]]\n     * \n     * @returns {Number} zoom level\n     */\n    getBoundsZoom(bounds, inside, padding) {\n        if (!this._rotate || Math.abs(this._bearing).toFixed(1) < 0.1) {\n            return mapProto.getBoundsZoom.apply(this, arguments);\n        }\n\n        bounds = L.latLngBounds(bounds);\n        padding = L.point(padding || [0, 0]);\n\n        let zoom = this.getZoom() || 0;\n        const min = this.getMinZoom(),\n                max = this.getMaxZoom(),\n                /** @TODO use mapProto.getBoundsZoom */\n                // nw = bounds.getNorthWest(),\n                // se = bounds.getSouthEast(),\n                // size = this.getSize().subtract(padding),\n                // boundsSize = L.bounds(this.project(se, zoom), this.project(nw, zoom)).getSize(),\n                size = this.getSize().subtract(padding),\n                boundsSize = this.mapBoundsToContainerBounds(bounds).getSize(),\n                snap = this.options.zoomSnap,\n                scalex = size.x / boundsSize.x,\n                scaley = size.y / boundsSize.y,\n                scale = inside ? Math.max(scalex, scaley) : Math.min(scalex, scaley);\n\n        zoom = this.getScaleZoom(scale, zoom);\n\n        if (snap) {\n            zoom = Math.round(zoom / (snap / 100)) * (snap / 100); // don't jump if within 1% of a snap level\n            zoom = inside ? Math.ceil(zoom / snap) * snap : Math.floor(zoom / snap) * snap;\n        }\n\n        return Math.max(min, Math.min(max, zoom));\n    },\n\n    /**\n     * Layer point of the current center\n     * \n     * @returns {L.Point} layer center\n     */\n    // _getCenterLayerPoint: function () {\n    //    return this.containerPointToLayerPoint(this.getSize()._divideBy(2));\n    // },\n\n    /**\n     * Offset of the specified place to the current center in pixels\n     * \n     * @param {L.LatLng} latlng map coordinates\n     */\n    _getCenterOffset: function(latlng) {\n        var centerOffset = mapProto._getCenterOffset.apply(this, arguments);\n        if (this._rotate) {\n            centerOffset = centerOffset.rotate(this._bearing);\n        }\n        return centerOffset;\n    },\n\n    /**\n     * @since leaflet-rotate (v0.1)\n     */\n    _getRotatePanePos: function() {\n        return this._rotatePanePos || new L.Point(0, 0);\n        // return L.DomUtil.getPosition(this._rotatePane) || new L.Point(0, 0);\n    },\n\n    // _latLngToNewLayerPoint(latlng, zoom, center) {\n    //    const topLeft = this._getNewPixelOrigin(center, zoom);\n    //    return this.project(latlng, zoom)._subtract(topLeft);\n    //},\n\n    _getNewPixelOrigin: function(center, zoom) {\n        if (!this._rotate) {\n            return mapProto._getNewPixelOrigin.apply(this, arguments);\n        }\n        var viewHalf = this.getSize()._divideBy(2);\n        return this.project(center, zoom)\n            .rotate(this._bearing)\n            ._subtract(viewHalf)\n            ._add(this._getMapPanePos())\n            ._add(this._getRotatePanePos())\n            .rotate(-this._bearing)\n            ._round();\n    },\n\n    /**\n     * @since leaflet-rotate (v0.2)\n     * \n     * @see src\\layer\\tile\\GridLayer::_getTiledPixelBounds()\n     */\n    _getNewPixelBounds: function(center, zoom) {\n        center = center || this.getCenter();\n        zoom = zoom || this.getZoom();\n        if (!this._rotate && mapProto._getNewPixelBounds) {\n            return mapProto._getNewPixelBounds.apply(this, arguments);\n        }\n        var mapZoom = this._animatingZoom ? Math.max(this._animateToZoom, this.getZoom()) : this.getZoom(),\n            scale = this.getZoomScale(mapZoom, zoom),\n            pixelCenter = this.project(center, zoom).floor(),\n            size = this.getSize(),\n            halfSize = new L.Bounds([\n                this.containerPointToLayerPoint([0, 0]).floor(),\n                this.containerPointToLayerPoint([size.x, 0]).floor(),\n                this.containerPointToLayerPoint([0, size.y]).floor(),\n                this.containerPointToLayerPoint([size.x, size.y]).floor()\n            ]).getSize().divideBy(scale * 2);\n\n        return new L.Bounds(pixelCenter.subtract(halfSize), pixelCenter.add(halfSize));\n    },\n\n    /**\n     * @since leaflet-rotate (v0.2)\n     * \n     * @return {L.Point} map pivot point (center)\n     */\n    _getPixelCenter: function() {\n        if (!this._rotate && mapProto._getPixelCenter) {\n            return mapProto._getPixelCenter.apply(this, arguments);\n        }\n        return this.getSize()._divideBy(2)._subtract(this._getMapPanePos());\n    },\n\n    /**\n     * @since leaflet-rotate (v0.2)\n     * \n     * @see src\\layer\\vector\\Renderer::_update()\n     */\n    _getPaddedPixelBounds: function(padding) {\n        if (!this._rotate && mapProto._getPaddedPixelBounds) {\n            return mapProto._getPaddedPixelBounds.apply(this, arguments);\n        }\n        var p = padding,\n            size = this.getSize(),\n            padMin = size.multiplyBy(-p),\n            padMax = size.multiplyBy(1 + p);\n            //min = this.containerPointToLayerPoint(size.multiplyBy(-p)).round();\n\n        return new L.Bounds([\n            this.containerPointToLayerPoint([padMin.x, padMin.y]).floor(),\n            this.containerPointToLayerPoint([padMin.x, padMax.y]).floor(),\n            this.containerPointToLayerPoint([padMax.x, padMin.y]).floor(),\n            this.containerPointToLayerPoint([padMax.x, padMax.y]).floor()\n        ]);\n    },\n\n    _handleGeolocationResponse: function(pos) {\n        if (!this._container._leaflet_id) { return; }\n\n        var lat = pos.coords.latitude,\n            lng = pos.coords.longitude,\n            /** @TODO use mapProto._handleGeolocationResponse */\n            hdg = pos.coords.heading,\n            latlng = new L.LatLng(lat, lng),\n            bounds = latlng.toBounds(pos.coords.accuracy),\n            options = this._locateOptions;\n\n        if (options.setView) {\n            var zoom = this.getBoundsZoom(bounds);\n            this.setView(latlng, options.maxZoom ? Math.min(zoom, options.maxZoom) : zoom);\n        }\n\n        var data = {\n            latlng: latlng,\n            bounds: bounds,\n            timestamp: pos.timestamp,\n            /** @TODO use mapProto._handleGeolocationResponse */\n            heading: hdg\n        };\n\n        for (var i in pos.coords) {\n            if (typeof pos.coords[i] === 'number') {\n                data[i] = pos.coords[i];\n            }\n        }\n\n        // @event locationfound: LocationEvent\n        // Fired when geolocation (using the [`locate`](#map-locate) method)\n        // went successfully.\n        this.fire('locationfound', data);\n    },\n\n    /**\n     * @see https://github.com/ronikar/Leaflet/blob/5c480ef959b947c3beed7065425a5a36c486262b/src/geo/LatLngBounds.js#L253-L264\n     * \n     * @param {L.Bounds} points \n     * @returns {L.Bounds}\n     */\n    // toCircumscribedBounds(points) {\n    //     var minX = points.reduce(function (pv, v) { return Math.min(pv, v.x); }, points[0].x),\n    //         maxX = points.reduce(function (pv, v) { return Math.max(pv, v.x); }, points[0].x),\n    //         minY = points.reduce(function (pv, v) { return Math.min(pv, v.y); }, points[0].y),\n    //         maxY = points.reduce(function (pv, v) { return Math.max(pv, v.y); }, points[0].y);\n    //\n    //     return L.bounds(L.point(minX, minY), L.point(maxX, maxY));\n    // },\n\n});\n","/**\n * Triggers `invalidateResize` when the map's DOM container mutates.\n * \n * @typedef L.Map.ContainerMutation\n */\n\n/**\n * @TODO check again this file after leaflet v1.9.3 (eg. L.Browser.mutation).\n * Mutation Observer support will likely be added by default in next releases.\n */\n\nL.Map.mergeOptions({\n\n    /**\n     * Whether the map uses mutation observers to\n     * detect changes in its container and trigger\n     * `invalidateSize`. Disabled by default due to\n     * support not being available in all web browsers.\n     *\n     * @type {Boolean}\n     * \n     * @see https://developer.mozilla.org/docs/Web/API/MutationObserver\n     */\n    trackContainerMutation: false\n\n});\n\nL.Map.ContainerMutation = L.Handler.extend({\n\n    addHooks: function() {\n        // if (!L.Browser.mutation) { return; }\n        if (!this._observer) {\n            this._observer = new MutationObserver(L.Util.bind(this._map.invalidateSize, this._map));\n        }\n        this._observer.observe(this._map.getContainer(), {\n            childList: false,\n            attributes: true,\n            characterData: false,\n            subtree: false,\n            attributeFilter: ['style']\n        });\n    },\n\n    removeHooks: function() {\n        // if (!L.Browser.mutation) { return; }\n        this._observer.disconnect();\n    },\n\n});\n\n/**\n * Add Container mutation handler to L.Map (disabled unless `trackContainerMutation` is set).\n * \n * @property {L.Map.ContainerMutation} trackContainerMutation\n */\nL.Map.addInitHook('addHandler', 'trackContainerMutation', L.Map.ContainerMutation);\n","/**\n * A tri-state control for map rotation, states are:\n *\n * - Locked (default)\n * - Unlocked (user can pinch-rotate)\n * - Follow (rotation follows device orientation, if available)\n *\n * @typedef L.Control.Rotate\n */\n\nL.Control.Rotate = L.Control.extend({\n    options: {\n        position: \"topleft\",\n        closeOnZeroBearing: true,\n    },\n\n    onAdd: function (map) {\n        var container = (this._container = L.DomUtil.create(\n            \"div\",\n            \"leaflet-control-rotate leaflet-bar\"\n        ));\n\n        // this.button = L.Control.Zoom.prototype._createButton.call(this, 'R', 'leaflet-control-rotate', 'leaflet-control-rotate', container, this._toggleLock);\n\n        var arrow = (this._arrow = L.DomUtil.create(\n            \"span\",\n            \"leaflet-control-rotate-arrow\"\n        ));\n\n        arrow.style.backgroundImage = `url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23333'%3E%3Cpath d='M10.5 14l4-8 4 8h-8z'/%3E%3Cpath d='M10.5 16l4 8 4-8h-8z' fill='%23ccc'/%3E%3C/svg%3E\")`;\n        arrow.style.cursor = \"grab\";\n        arrow.style.display = \"block\";\n        arrow.style.width = \"100%\";\n        arrow.style.height = \"100%\";\n        arrow.style.backgroundRepeat = \"no-repeat\";\n        arrow.style.backgroundPosition = \"50%\";\n\n        // Copy-pasted from L.Control.Zoom\n        var link = (this._link = L.DomUtil.create(\n            \"a\",\n            \"leaflet-control-rotate-toggle\",\n            container\n        ));\n        link.appendChild(arrow);\n        link.href = \"#\";\n        link.title = \"Rotate map\";\n\n        L.DomEvent.on(link, \"dblclick\", L.DomEvent.stopPropagation)\n            .on(link, \"mousedown\", this._handleMouseDown, this)\n            .on(link, \"click\", L.DomEvent.stop)\n            .on(link, \"click\", this._cycleState, this)\n            .on(link, \"click\", this._refocusOnMap, this);\n\n        if (!L.Browser.any3d) {\n            L.DomUtil.addClass(link, \"leaflet-disabled\");\n        }\n\n        this._restyle();\n\n        map.on(\"rotate\", this._restyle, this);\n\n        // State flag\n        this._follow = false;\n        this._canFollow = false;\n\n        if (this.options.closeOnZeroBearing && map.getBearing() === 0) {\n            container.style.display = \"none\";\n        }\n\n        return container;\n    },\n\n    onRemove: function (map) {\n        map.off(\"rotate\", this._restyle, this);\n    },\n\n    _handleMouseDown: function (e) {\n        L.DomEvent.stop(e);\n        this.dragging = true;\n        this.dragstartX = e.pageX;\n        this.dragstartY = e.pageY;\n        L.DomEvent.on(document, \"mousemove\", this._handleMouseDrag, this).on(\n            document,\n            \"mouseup\",\n            this._handleMouseUp,\n            this\n        );\n    },\n\n    _handleMouseUp: function (e) {\n        L.DomEvent.stop(e);\n        this.dragging = false;\n\n        L.DomEvent.off(document, \"mousemove\", this._handleMouseDrag, this).off(\n            document,\n            \"mouseup\",\n            this._handleMouseUp,\n            this\n        );\n    },\n\n    _handleMouseDrag: function (e) {\n        if (!this.dragging) {\n            return;\n        }\n        var deltaX = e.clientX - this.dragstartX;\n        this._map.setBearing(deltaX);\n    },\n\n    _cycleState: function (ev) {\n        if (!this._map) {\n            return;\n        }\n\n        var map = this._map;\n\n        // // Touch mode\n        // if (!map.touchRotate.enabled() && !map.compassBearing.enabled()) {\n        //     map.touchRotate.enable();\n        // }\n\n        // Compass mode\n        // else if (!map.compassBearing.enabled()) {\n        //     map.touchRotate.disable();\n        //     (\n        //         DeviceOrientationEvent && DeviceOrientationEvent.requestPermission\n        //             ? DeviceOrientationEvent.requestPermission() // iOS compass\n        //             : Promise.resolve('granted')                 // others\n        //     ).then(state => \"granted\" === state && map.compassBearing.enable())\n        // }\n\n        // Locked mode\n        // else {\n        // map.compassBearing.disable();\n        map.setBearing(0);\n        // if (this.options.closeOnZeroBearing) {\n        //     map.touchRotate.enable();\n        // }\n        // }\n        this._restyle();\n    },\n\n    _restyle: function () {\n        if (!this._map.options.rotate) {\n            L.DomUtil.addClass(this._link, \"leaflet-disabled\");\n        } else {\n            var map = this._map;\n            var bearing = map.getBearing();\n\n            this._arrow.style.transform = \"rotate(\" + bearing + \"deg)\";\n\n            this._link.style.backgroundColor = null;\n\n            if (bearing && this.options.closeOnZeroBearing) {\n                this._container.style.display = \"block\";\n            }\n            if (0 === bearing && this.options.closeOnZeroBearing) {\n                this._container.style.display = \"none\";\n            }\n            // }\n        }\n    },\n});\n\nL.control.rotate = function (options) {\n    return new L.Control.Rotate(options);\n};\n\nL.Map.mergeOptions({\n    rotateControl: true,\n});\n\nL.Map.addInitHook(function () {\n    if (this.options.rotateControl) {\n        var options =\n            typeof this.options.rotateControl === \"object\"\n                ? this.options.rotateControl\n                : {};\n        this.rotateControl = L.control.rotate(options);\n        this.addControl(this.rotateControl);\n    }\n});\n"],"names":["domUtilProto","L","extend","DomUtil","setTransform","el","offset","scale","bearing","pivot","console","log","pos","Point","_round","apply","this","arguments","rotateFrom","style","TRANSFORM","x","y","setPosition","point","_leaflet_pos","Browser","any3d","left","top","DEG_TO_RAD","Math","PI","RAD_TO_DEG","Draggable","include","prototype","rotate","theta","sinTheta","sin","cosTheta","cos","cx","cy","divOverlayProto","DivOverlay","getEvents","_updatePosition","_map","_rotate","_zoomAnimated","anchor","_getAnchor","getPosition","_container","subtract","rotatedPointToMapPanePoint","add","popupProto","Popup","_animateZoom","e","_adjustPan","options","autoPan","_panAnim","_inProgress","_autopanning","map","marginBottom","parseInt","getStyle","containerHeight","offsetHeight","containerWidth","_containerWidth","layerPos","_containerLeft","_containerBottom","_add","containerPos","_getMapPanePos","padding","autoPanPadding","paddingTL","autoPanPaddingTopLeft","paddingBR","autoPanPaddingBottomRight","size","getSize","dx","dy","keepInView","fire","panBy","tooltipProto","Tooltip","_latLngToNewLayerPoint","_latlng","zoom","center","_setPosition","latLngToLayerPoint","gridLayerProto","GridLayer","events","updateWhenIdle","_onRotate","Util","throttle","_onMoveEnd","updateInterval","_getTiledPixelBounds","_getNewPixelBounds","_tileZoom","mapProto","Map","mergeOptions","initialize","id","_bearing","setBearing","containerPointToLayerPoint","_getRotatePanePos","layerPointToContainerPoint","mapPanePointToRotatedPoint","_subtract","mapBoundsToContainerBounds","bounds","origin","getPixelOrigin","nw","project","getNorthWest","ne","getNorthEast","sw","getSouthWest","se","getSouthEast","min","max","getBounds","LatLngBounds","containerPointToLatLng","wrapNum","_getPixelCenter","oldPos","newPos","_rotatePane","_pivot","_rotatePanePos","getBearing","_initPanes","panes","_panes","_paneRenderers","_mapPane","createPane","_norotatePane","markerZoomAnimation","addClass","markerPane","shadowPane","panInside","latlng","abs","toFixed","paddingTopLeft","paddingBottomRight","rect","getBoundingClientRect","pixelPoint","latLngToContainerPoint","pixelBounds","pixelCenter","getCenter","paddedBounds","paddedSize","contains","_enforcingBounds","centerOffset","panTo","getBoundsZoom","inside","latLngBounds","getZoom","getMinZoom","getMaxZoom","boundsSize","snap","zoomSnap","scalex","scaley","getScaleZoom","round","ceil","floor","_getCenterOffset","_getNewPixelOrigin","viewHalf","_divideBy","mapZoom","_animatingZoom","_animateToZoom","getZoomScale","halfSize","Bounds","divideBy","_getPaddedPixelBounds","p","padMin","multiplyBy","padMax","_handleGeolocationResponse","_leaflet_id","lat","coords","latitude","lng","longitude","hdg","heading","LatLng","toBounds","accuracy","_locateOptions","setView","maxZoom","data","timestamp","i","trackContainerMutation","ContainerMutation","Handler","addHooks","_observer","MutationObserver","bind","invalidateSize","observe","getContainer","childList","attributes","characterData","subtree","attributeFilter","removeHooks","disconnect","addInitHook","Control","Rotate","position","closeOnZeroBearing","onAdd","container","create","arrow","_arrow","backgroundImage","cursor","display","width","height","backgroundRepeat","backgroundPosition","link","_link","appendChild","href","title","DomEvent","on","stopPropagation","_handleMouseDown","stop","_cycleState","_refocusOnMap","_restyle","_follow","_canFollow","onRemove","off","dragging","dragstartX","pageX","dragstartY","pageY","document","_handleMouseDrag","_handleMouseUp","deltaX","clientX","ev","transform","backgroundColor","control","rotateControl","addControl"],"mappings":"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"}